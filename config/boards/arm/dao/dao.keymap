/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define LR3 3
#define ADJ 4

#define AS(keycode) &as LS(keycode) keycode

&lt { quick_tap_ms = <110>; };

/*
/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        // zmk,matrix_transform = &extra_keys_transform;
    };
};
*/

/ {
	/**
	 * Temporarily switches to a layer (`&mo`) while a modifier is held.
	 * Analogous to QMK's `LM()`, using a parameterized macro.
	 *
	 * Params:
	 *  1. Layer to switch to
	 *  2. Modifier to press while layer is active
	 *
	 * Example:
	 *  `&lm NUM_LAYER LSHIFT`
	 */
lm: lm {
			compatible = "zmk,behavior-macro-two-param";
			wait-ms = <0>;
			tap-ms = <0>;
#binding-cells = <2>;
			bindings
				= <&macro_param_1to1>
				, <&macro_press &mo MACRO_PLACEHOLDER>
				, <&macro_param_2to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_pause_for_release>
				, <&macro_param_2to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>
				, <&macro_param_1to1>
				, <&macro_release &mo MACRO_PLACEHOLDER>
				;
		};
 
		conditional_layers {
			compatible = "zmk,conditional-layers";
			tri_layer {
				if-layers = <LWR RSE>;
				then-layer = <ADJ>;
			};
		};
 
 		behaviors {
		as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        f1: tap_dance_f1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <AS(F1)>, <AS(LC(F1))>, <AS(LA(F1))>;
        };
        f2: tap_dance_f2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <AS(F2)>, <AS(LC(F2))>, <AS(LA(F2))>;
        };
        f3: tap_dance_f3 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <AS(F3)>, <AS(LC(F3))>, <AS(LA(F3))>;
        };
        f4: tap_dance_f4 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <AS(F4)>, <AS(LC(F4))>, <AS(LA(F4))>;
        };
        f5: tap_dance_f5 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <AS(F5)>, <AS(LC(F5))>, <AS(LA(F5))>;
        };
        f6: tap_dance_f6 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <AS(F6)>, <AS(LC(F6))>, <AS(LA(F6))>;
        };
        f7: tap_dance_f7 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <AS(F7)>, <AS(LC(F7))>, <AS(LA(F7))>;
        };
        f8: tap_dance_f8 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <AS(F8)>, <AS(LC(F8))>, <AS(LA(F8))>;
        };
        f9: tap_dance_f9 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <AS(F9)>, <AS(LC(F9))>, <AS(LA(F9))>;
        };
        f10: tap_dance_f10 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <AS(F10)>, <AS(LC(F10))>, <AS(LA(F10))>;
        };
        f11: tap_dance_f11 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <AS(F11)>, <AS(LC(F11))>, <AS(LA(F11))>;
        };
				f12: tap_dance_f12 {
						compatible = "zmk,behavior-tap-dance";
						#binding-cells = <0>;
						tapping-term-ms = <155>;
						bindings = <AS(F12)>, <AS(LC(F12))>, <AS(LA(F12))>;
				};
 				home: tap_dance_home {
						compatible = "zmk,behavior-tap-dance";
						#binding-cells = <0>;
						tapping-term-ms = <135>;
						bindings = <AS(HOME)>, <AS(LC(HOME))>, <AS(LA(HOME))>;
				};
 				end: tap_dance_end {
						compatible = "zmk,behavior-tap-dance";
						#binding-cells = <0>;
						tapping-term-ms = <135>;
						bindings = <AS(END)>, <AS(LC(END))>, <AS(LA(END))>;
				};
  };

keymap {
compatible = "zmk,keymap";

default_layer {
label="646546";
bindings = <
AS(TAB) AS(Q) AS(W) AS(F) AS(P) AS(G) AS(J) AS(L) AS(U) AS(Y) AS(SEMICOLON) &kp BACKSPACE
&kp LSFT AS(A) AS(R) AS(S) AS(T) AS(D) AS(H) AS(N) AS(E) AS(I) AS(O) AS(ENTER)
&kp LCTL AS(Z) AS(X) AS(C) AS(V) AS(B) AS(K) AS(M) AS(COMMA) AS(DOT) AS(SLASH) &kp RSFT 
&lm LR3 LCTL &kp LALT &lt LWR SPACE &mo RSE &kp RCTL &kp RALT
>;
};

lower_layer {
bindings = <
&mkp MB3 &trans &f1 &f2 &f3 &f4 &trans &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS &kp KP_PLUS
&trans &kp ESC &f5 &f6 &f7 &f8 &trans &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_N0 &trans
&trans &trans &f9 &f10 &f11 &f12 &trans &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_SLASH &kp KP_ASTERISK
&trans &trans &trans &trans &trans &trans
>;
};

raise_layer {
bindings = <
&kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT &kp CARET &kp PG_UP &kp LC(INS) &kp UP &kp LS(INS) &kp K_APP &kp DEL
&trans &kp STAR &kp LPAR &kp RPAR AS(MINUS) AS(EQUAL) &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT AS(SINGLE_QUOTE) &kp LC(LS(ENTER))
&trans AS(BSLH) AS(LBKT) AS(RBKT) AS(GRAVE) &kp AMPS &trans &home &kp LC(X) &end &kp RGUI &trans
&trans &trans &mt LCTRL SPACE &trans &trans
>;
};

LR3 {
	bindings = <
		&mkp MB1 &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
		&trans &trans &trans &trans &trans &trans &trans &kp KP_MINUS &trans &kp KP_PLUS &trans &kp LS(F15)
		&trans &trans &trans &trans &trans &trans &trans &kp RA(RS(END)) &trans &kp RA(RS(HOME)) &trans &trans
		&trans &trans &trans &trans &trans &trans
		>;
};

adjust_layer {
	bindings = <
&kp KP_NUM &trans &trans &trans &trans &trans &kp K_VOL_UP &kp RG(LA(LC(LS(N7)))) &kp RG(LA(LC(LS(N8)))) &kp RG(LA(LC(LS(N9)))) &trans &kp PAUSE_BREAK
&kp CAPS &kp STAR &trans &trans &trans &trans &kp K_VOL_DN &kp RG(LA(LC(LS(N4)))) &kp RG(LA(LC(LS(N5)))) &kp RG(LA(LC(LS(N6)))) &kp RG(LA(LC(LS(KP_N0)))) &trans
&kp INS &trans &trans &trans &trans &trans &kp K_MUTE &kp RG(LA(LC(LS(N1)))) &kp RG(LA(LC(LS(N2)))) &kp RG(LA(LC(LS(N3)))) &trans &trans
&trans &trans &trans &trans &bootloader &trans
>;
};
};
};
