/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

#define AS(keycode) &as LS(keycode) keycode

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        // zmk,matrix_transform = &extra_keys_transform;
    };
};


/ {
	/**
	 * Temporarily switches to a layer (`&mo`) while a modifier is held.
	 * Analogous to QMK's `LM()`, using a parameterized macro.
	 *
	 * Params:
	 *  1. Layer to switch to
	 *  2. Modifier to press while layer is active
	 *
	 * Example:
	 *  `&lm NUM_LAYER LSHIFT`
	 */
lm: lm {
			compatible = "zmk,behavior-macro-two-param";
			wait-ms = <0>;
			tap-ms = <0>;
#binding-cells = <2>;
			bindings
				= <&macro_param_1to1>
				, <&macro_press &mo MACRO_PLACEHOLDER>
				, <&macro_param_2to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_pause_for_release>
				, <&macro_param_2to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>
				, <&macro_param_1to1>
				, <&macro_release &mo MACRO_PLACEHOLDER>
				;
		};
 
 		behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

		keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
TAB &kp Q &kp W &kp F &kp P &kp G &kp J &kp L &kp U &kp Y &kp SEMICOLON &kp BACKSPACE
&kp LSFT &kp A &kp R &kp S &kp T &kp D &kp H &kp N &kp E &kp I &kp O ENTER
&kp LCTL &kp Z &kp X &kp C &kp V &kp B &kp K &kp M &kp COMMA &kp DOT &kp SLASH &kp RSFT 
&lm 4 LCTL &kp LALT &lt LWR SPACE &mo RSE &kp RCTL &kp RALT





/*
          &mt LGUI RBKT     &kp Q   &kp W   &kp E         &kp R             &kp T         &kp Y         &kp U            &kp I         &kp O     &kp P      &kp LBKT       
          &mt LCTRL GRAVE   &kp A   &kp S   &kp D         &kp F             &kp G         &kp H         &kp J            &kp K         &kp L     &kp SEMI   &mt RCTRL SQT
          &mt LALT MINUS    &kp Z   &kp X   &kp C         &kp V             &kp B         &kp N         &kp M            &kp COMMA     &kp DOT   &kp FSLH   &mt RALT BSLH
                                            &lt RSE TAB   &mt LSHFT SPACE   &lt LWR RET   &lt LWR ESC   &mt RSHFT BSPC   &lt RSE DEL
*/
											 >;
                };
                lower_layer {
                        bindings = <
TD(DANCE_MC),_,TD(DANCE_F1),TD(DANCE_F2),TD(DANCE_F3),TD(DANCE_F4),_,KC_KP_7,KC_KP_8,KC_KP_9,KC_KP_MINUS,KC_KP_PLUS,
_,TD(DANCE_ESC),TD(DANCE_F5),TD(DANCE_F6),TD(DANCE_F7),TD(DANCE_F8),_,KC_KP_4,KC_KP_5,KC_KP_6,KC_KP_0,KC_RSFT,
_,TD(DANCE_CC),TD(DANCE_F9),TD(DANCE_F10),TD(DANCE_F11),TD(DANCE_F12),_,KC_KP_1,KC_KP_2,KC_KP_3,KC_KP_SLASH,KC_KP_ASTERISK,
    _,_,_,_,_,_
												
/*          &mt LGUI F1      &kp F2     &kp F3   &kp F4        &kp F5     &kp F6      &kp F7      &kp F8     &kp F9        &kp F10    &kp F11    &kp F12           
          &mt LCTRL PLUS   &kp EXCL   &kp AT   &kp HASH      &kp DLLR   &kp PRCNT   &kp CARET   &kp AMPS   &kp STAR      &kp LPAR   &kp RPAR   &mt RCTRL MINUS
          &mt LALT EQUAL   &kp N1     &kp N2   &kp N3        &kp N4     &kp N5      &kp N6      &kp N7     &kp N8        &kp N9     &kp N0     &kp RALT
                                               &lt ADJ TAB   &trans     &trans      &trans      &trans     &lt ADJ DEL
*/
 >;
                };

                raise_layer {
                        bindings = <
          &mt LGUI KP_NUM   &kp KP_SLASH      &kp KP_N7   &kp KP_N8   &kp KP_N9   &kp KP_MINUS   &kp C_VOL_UP   &kp HOME   &kp PSCRN   &kp PG_UP   &kp SLCK          &kp CLCK   
          &mt LCTRL EQUAL   &kp KP_MULTIPLY   &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp KP_PLUS    &kp C_MUTE     &kp LEFT   &kp UP      &kp RIGHT   &kp INS           &mt RCTRL  K_APP
          &kp LALT          &kp KP_N0         &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp KP_DOT     &kp C_VOL_DN   &kp END    &kp DOWN    &kp PG_DN   &kp PAUSE_BREAK   &kp RALT
                                                          &trans      &trans      &lt ADJ RET    &lt ADJ ESC    &trans     &trans
                        >;
                };
                adjust_layer {
                        bindings = <
 &bootloader   &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          &bootloader
 &bt BT_CLR    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &bt BT_SEL 4   &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1   &bt BT_SEL 0   &bt BT_CLR
 &sys_reset        &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          &sys_reset
                                             &trans         &none          &trans         &trans         &none          &trans
                        >;
                };
        };
};
